library(mice)
# This takes care of changing path names depending on whether working on ultra or not.
# If working on ultra, set ultra==True
ultra <- FALSE
if (ultra == TRUE){
root <- '/home/u034/'
} else {
root <- 'Y:/'
}
# catVars is a list of variables that are categorical.
catVars <- c('sex', 'ethnicity', 'infect_cmtrt', 'chrincard', 'chronicpul_mhyn', 'asthma_mhyn', 'renal_mhyn', 'modliv',
'diabetescom_mhyn', 'diabetes_mhyn', 'dementia_mhyn', 'malignantneo_mhyn', 'obesity_mhyn' )
# freqTab prints frequency tables for the imputations and the real data against each other for the categorical variables
# to allow comparison.
freqTab <- function(Imputation){
for (var in catVars){
real <- table(data[var])
nlevels <- length(real)
freqTable <- data.frame( matrix(ncol = Imputation$m +1, nrow = nlevels) )
colnames(freqTable) <- append( seq(1, Imputation$m, 1), 'real')
rownames(freqTable) <- seq(0, nlevels-1, 1)
for (m in 1:Imputation$m ){
tab <- table(as.data.frame(Imputation$imp[var])[,m] )
freqTable[, m] <- tab / sum(tab)
freqTable[, 'real'] <- table(data[var]) / sum( table(data[var]) )
}
print(var)
print(freqTable)
}
}
freqTab <- function(Imputation){
for (var in catVars){
real <- table(data[var])
nlevels <- length(real)
freqTable <- data.frame( matrix(ncol = Imputation$m +1, nrow = nlevels) )
colnames(freqTable) <- append( seq(1, Imputation$m, 1), 'real')
rownames(freqTable) <- seq(0, nlevels-1, 1)
for (m in 1:Imputation$m ){
tab <- table(as.data.frame(Imputation$imp[var])[,m] )
freqTable[, m] <- tab / sum(tab)
freqTable[, 'real'] <- table(data[var]) / sum( table(data[var]) )
}
print(var)
print(freqTable)
}
}
load(file = paste(root, 'shared/data/wp-5/clinical_imputation/mids.RData', sep='') )
densityplot(Imputation)
library(mice)
# This takes care of changing path names depending on whether working on ultra or not.
# If working on ultra, set ultra==True
ultra <- FALSE
if (ultra == TRUE){
root <- '/home/u034/'
} else {
root <- 'Y:/'
}
library(dplyr)
library(ggplot2)
library(mice)
library(data.table)
# This takes care of changing path names depending on whether working on ultra or not.
# If working on ultra, set ultra==True
ultra <- TRUE
if (ultra == TRUE){
root <- '/home/u034/'
} else {
root <- 'Y:/'
}
data <- fread( paste( root, 'shared/data/wp-5/clinical_imputation/cleanData.csv', sep=''), data.table=FALSE)
# If working on ultra, set ultra==True
ultra <- FALSE
if (ultra == TRUE){
root <- '/home/u034/'
} else {
root <- 'Y:/'
}
data <- fread( paste( root, 'shared/data/wp-5/clinical_imputation/cleanData.csv', sep=''), data.table=FALSE)
hist(data['dailt_plt_lborres'])
hist(data['daily_plt_lborres'])
data[catVars] <- lapply(data[catVars], factor )
catVars <- c('sex', 'ethnicity', 'infect_cmtrt', 'chrincard', 'chronicpul_mhyn', 'asthma_mhyn', 'renal_mhyn', 'modliv',
'diabetescom_mhyn', 'diabetes_mhyn', 'dementia_mhyn', 'malignantneo_mhyn', 'obesity_mhyn' )
data[catVars] <- lapply(data[catVars], factor )
sapply(data, class)
hist(data['daily_plt_lborres'])
data['daily_plt_lborres']
typeof[1, 'daily_plt_lborres']
typeof(data[1, 'daily_plt_lborres'])
typeof(data[1, 'age'])
hist(data['age'])
sapply(data, class)
hist(data['temp_vsorres'])
colMax(data['daily_plt_lborres'])
max(data['daily_plt_lborres'], na.rm = TRUE)
data <- fread( paste( root, 'shared/data/wp-5/clinical_imputation/cleanData.csv'), data.table=FALSE)
data <- fread( paste( root, 'shared/data/wp-5/clinical_imputation/cleanData.csv'), data.table=FALSE))
data <- fread( paste( root, 'shared/data/wp-5/clinical_imputation/cleanData.csv'), data.table=FALSE )
data <- fread( paste( root, 'shared/data/wp-5/clinical_imputation/cleanData.csv', sep=''), data.table=FALSE)
View(data)
var <- 'daily_plt_lborres'
data[var > 1000]
data[var][data[var > 1000]]
data[data[var > 1000]][var]
data[var]
data[data[var > 1000]]
data[data[var] >  1000]]
data[data[var] >  1000]
data[var][data[var] >  1000]
data[var][data[var] >  1000 & !is.na(data[var]) ]
library(dplyr)
library(ggplot2)
library(mice)
library(data.table)
# This takes care of changing path names depending on whether working on ultra or not.
# If working on ultra, set ultra==True
ultra <- FALSE
if (ultra == TRUE){
root <- '/home/u034/'
} else {
root <- 'Y:/'
}
data <- fread( paste( root, 'shared/data/wp-5/clinical_imputation/cleanData.csv', sep=''), data.table=FALSE)
var <- 'daily_plt_lborres'
data[var][data[var] >  1000 & !is.na(data[var]) ]
######################################################################
## Code author: Steven Kerr
## Description:
# This code does multiple imputation by chained equations for cleaned
# topline clinical data
######################################################################
library(dplyr)
library(ggplot2)
library(mice)
library(data.table)
########################### READ DATA ###############################################
# This takes care of changing path names depending on whether working on ultra or not.
# If working on ultra, set ultra==True
ultra <- FALSE
if (ultra == TRUE){
root <- '/home/u034/'
} else {
root <- 'Y:/'
}
data <- fread( paste( root, 'shared/data/wp-5/clinical_imputation/cleanData.csv', sep=''), data.table=FALSE)
# nan from python in a column that has strings is read as "", so need to replace with NA.
data[, c('sex', 'ethnicity')][ data[, c('sex', 'ethnicity')] == ""] <- NA
# catVars is a list of variables that are categorical.
catVars <- c('sex', 'ethnicity', 'infect_cmtrt', 'chrincard', 'chronicpul_mhyn', 'asthma_mhyn', 'renal_mhyn', 'modliv',
'diabetes', 'dementia_mhyn', 'malignantneo_mhyn', 'obesity_mhyn', 'immunosuppressed_yn' )
# mice needs categorical varaiables to be factors
data[catVars] <- lapply(data[catVars], factor )
# Create plots for number of NA in rows and columns
columnNA <- as.data.frame(colSums(is.na(data)) )
colnames(columnNA) <- 'Number of NA'
rowNA <- as.data.frame(rowSums(is.na(data)) )
colnames(rowNA) <- 'Number of NA'
columnNAPlot <-ggplot(columnNA, aes(x= reorder( rownames(columnNA), `Number of NA` ) , y=`Number of NA` )) + geom_bar(stat="identity", fill="steelblue") + coord_flip()
show(columnNAPlot)
rowNAPlot <-ggplot(rowNA, aes(x=`Number of NA` ) ) + geom_histogram(bins=dim(data)[2], fill="steelblue") +
scale_x_continuous(breaks = seq(0, dim(data)[2], 1) ) +
scale_y_continuous(breaks = seq(0, 37000, 5000) )
show(rowNAPlot)
# Take a sample of data
sample <- sample_n(data, 500)
View(data)
# Add sf94
df <- mutate(df, sf94 = case_when(  sao2 <= 0.94  | fio2 == 0.21 ~ sfr))
# Add sf94
data <- mutate(data, sf94 = case_when(  sao2 <= 0.94  | fio2 == 0.21 ~ sfr))
# impExclude is a vector of variables that are not to be imputed
impExclude <- c('subjid', 'sfr', 'sao2', 'fio2')
createMethod <- function(impExclude){
method <- as.data.frame( sapply(data, nlevels) )
method[ method[,1] > 2, ] <- 'polyreg'
method[ impExclude, ] <- ''
method[ method[,1] ==0 , ] <- 'pmm'
method[ method[,1] ==2 , ] <- 'logreg'
method <- dplyr::pull(method, colnames(method) )
}
method <- createMethod(impExclude)
method
# Carry out imputation
Imputation <- mice(sample,m=1,maxit=100, predictorMatrix = quickpred(data, exclude = impExclude), method = method  )
predictorMatrix = quickpred(data, exclude = impExclude)
View(predictorMatrix)
# Carry out imputation
Imputation <- mice(sample,m=1,maxit=100, predictorMatrix = quickpred(data, exclude = impExclude), method = method)
View(data)
colnames(data)
colnames(predictorMatrix)
# Take a sample of data
sample <- sample_n(data, 500)
# Carry out imputation
Imputation <- mice(sample,m=1,maxit=100, predictorMatrix = quickpred(data, exclude = impExclude), method = method)
View(data)
source('Y:/stevenkerr/Git/wp5-clustering/Code/clinical/ImputationDiagnostic.R', echo=TRUE)
source('Y:/stevenkerr/Git/wp5-clustering/Code/clinical/ImputationDiagnostic.R', echo=TRUE)
densityplot(Imputation, data ~ temp_vsorres + hr_vsorres + rr_vsorres + sysbp_vsorres + admission_diabp_vsorres + daily_lymp_lborres +
daily_neutro_lborres + daily_plt_lborres + daily_bun_lborres + daily_creat_lborres + daily_crp_lborres + onset2admission + age + sf94 )
View(data)
View(Imputation)
bob <- complete(Imputation)
View(bob)
######################################################################
## Code author: Steven Kerr
## Description:
# This code does multiple imputation by chained equations for cleaned
# topline clinical data
######################################################################
library(dplyr)
library(ggplot2)
library(mice)
library(data.table)
########################### READ DATA ###############################################
# This takes care of changing path names depending on whether working on ultra or not.
# If working on ultra, set ultra==True
ultra <- FALSE
if (ultra == TRUE){
root <- '/home/u034/'
} else {
root <- 'Y:/'
}
data <- fread( paste( root, 'shared/data/wp-5/clinical_imputation/cleanData.csv', sep=''), data.table=FALSE)
# nan from python in a column that has strings is read as "", so need to replace with NA.
data[, c('sex', 'ethnicity')][ data[, c('sex', 'ethnicity')] == ""] <- NA
# catVars is a list of variables that are categorical.
catVars <- c('sex', 'ethnicity', 'infect_cmtrt', 'chrincard', 'chronicpul_mhyn', 'asthma_mhyn', 'renal_mhyn', 'modliv',
'diabetes', 'dementia_mhyn', 'malignantneo_mhyn', 'obesity_mhyn', 'immunosuppressed_yn' )
# mice needs categorical varaiables to be factors
data[catVars] <- lapply(data[catVars], factor )
# Add sf94
data <- mutate(data, sf94 = case_when(  sao2 <= 0.94  | fio2 == 0.21 ~ sfr))
